import Head from 'next/head'
import { View, useAuthenticator } from '@aws-amplify/ui-react'
import { useState } from 'react'
import { RecipeForm } from '@/components/RecipeForm'
import { CreateRecipeInput } from '@/graphql/API'
import { API } from 'aws-amplify'
import { createRecipe } from '@/graphql/mutations'
import ReactConfetti from 'react-confetti'
import { RequireAuth } from '@/components/RequireAuth'
import { getUser } from '@/graphql/queries'

const CreateRecipePage = () => {
	const [showConfetti, setShowConfetti] = useState(false)
	const { user } = useAuthenticator((context) => [context.user])

	const handleFormSubmit = async (recipeData: CreateRecipeInput) => {
		console.log(recipeData)
		let res
		try {
			const userDetails = await API.graphql({
				query: getUser,
				variables: { id: user.attributes?.sub },
			})
			console.log({ userDetails })
			// res = await API.graphql({
			// 	query: createRecipe,
			// 	variables: { input: recipeData },
			// })

			// setShowConfetti(true)
		} catch (err) {
			console.log(err)
		}
		console.log(res)
	}

	return (
		<RequireAuth>
			<Head>
				<title>Create Next App</title>
				<meta name="description" content="Generated by create next app" />
				<meta name="viewport" content="width=device-width, initial-scale=1" />
				<link rel="icon" href="/favicon.ico" />
			</Head>

			<View>
				<RecipeForm handleFormSubmit={handleFormSubmit} />
			</View>
			{showConfetti && (
				<ReactConfetti
					style={{ pointerEvents: 'none' }}
					numberOfPieces={500}
					recycle={false}
					onConfettiComplete={(confetti) => {
						setShowConfetti(false)
						confetti?.reset()
					}}
				/>
			)}
		</RequireAuth>
	)
}

export default CreateRecipePage
